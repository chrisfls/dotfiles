;;; -*- lexical-binding: t; -*-

(defun my/cancel-grab ()
  (interactive)
  (delete-overlay mouse-secondary-overlay)
  (setq mouse-secondary-start (make-marker))
  (move-marker mouse-secondary-start (point)))

(defun my/unmark-and-cancel-grab ()
  (interactive)
  (my/cancel-grab)
  (deactivate-mark))

(defun my/grab-region ()
  (interactive)
  (if (region-active-p)
      (progn
        (secondary-selection-from-region)
        (deactivate-mark))
    (my/cancel-grab)))

(defun my/grab-active-p ()
  (secondary-selection-exist-p))

(defun my/grab-beginning ()
  (when (secondary-selection-exist-p)
    (overlay-start mouse-secondary-overlay)))
    
(defun my/grab-end ()
  (when (secondary-selection-exist-p)
    (overlay-end mouse-secondary-overlay)))

(defun my/mark-and-grab-do-not-overlap-p ()
  (when (and (region-active-p) (my/grab-active-p))
    (or
      (and (> (region-beginning) (my/grab-beginning))
           (> (region-end) (my/grab-end)))
      (and (< (region-beginning) (my/grab-beginning))
           (< (region-end) (my/grab-end))))))

(defun region-after-grab-p ()
  (when (my/mark-and-grab-do-not-overlap-p)
    (> (region-beginning) (my/grab-beginning))))

(defun my/swap-grab ()
  (interactive)
  (if (and (my/grab-active-p) (region-active-p))
        (let ((snd-beginning (my/grab-beginning))
              (snd-end (my/grab-end)))
          (secondary-selection-from-region)
          (set-mark snd-beginning)
          (goto-char snd-end)
          (activate-mark))
    (my/grab-region)))

(defun my/swap-grab-content ()
  (interactive)
  (when (my/mark-and-grab-do-not-overlap-p)
    (let ((region (buffer-substring (region-beginning) (region-end)))
          (grab (buffer-substring (my/grab-beginning) (my/grab-end))))
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert grab)
      (setq deactivate-mark nil)
      (my/swap-grab)
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert region)
      (setq deactivate-mark nil)
      (my/swap-grab))))

(defun my/sync-grab-content ()
  (interactive)
  (when (my/mark-and-grab-do-not-overlap-p)
    (let ((region (buffer-substring (region-beginning) (region-end))))
      (swap-grab)
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert region)
      (setq deactivate-mark nil)
      (swap-grab))))

(defun my/sync-region-content ()
  (interactive)
  (when (my/mark-and-grab-do-not-overlap-p)
    (let ((secondary (buffer-substring (my/grab-beginning) (my/grab-end))))
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert secondary)
      (setq deactivate-mark nil))))

(provide 'secondary-selection)
