(defun cancel-grap ()
  (delete-overlay mouse-secondary-overlay)
  (setq mouse-secondary-start (make-marker))
  (move-marker mouse-secondary-start (point)))

(defun grab-region ()
  (interactive)
  (if (region-active-p)
      (secondary-selection-from-region)
    (cancel-grap))
  (deactivate-mark))

(defun secondary-active-p ()
  (secondary-selection-exist-p))

(defun secondary-beginning ()
  (when (secondary-selection-exist-p)
    (overlay-start mouse-secondary-overlay)))
    
(defun secondary-end ()
  (when (secondary-selection-exist-p)
    (overlay-end mouse-secondary-overlay)))

(defun region-and-secondary-do-not-overlap-p ()
  (when (and (region-active-p) (secondary-active-p))
    (or
      (and (> (region-beginning) (secondary-beginning))
           (> (region-end) (secondary-end)))
      (and (< (region-beginning) (secondary-beginning))
           (< (region-end) (secondary-end))))))

(defun region-after-secondary-p ()
  (when (region-and-secondary-do-not-overlap-p)
    (> (region-beginning) (secondary-beginning))))

(defun swap-grab ()
  (interactive)
  (when (and (secondary-active-p) (region-active-p))
    (let ((snd-beginning (secondary-beginning))
          (snd-end (secondary-end)))
      (secondary-selection-from-region)
      (set-mark snd-beginning)
      (goto-char snd-end)
      (activate-mark))))

(defun swap-grab-content ()
  (interactive)
  (when (region-and-secondary-do-not-overlap-p)
    (let ((region (buffer-substring (region-beginning) (region-end)))
          (secondary (buffer-substring (secondary-beginning) (secondary-end))))
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert secondary)
      (setq deactivate-mark nil)
      (swap-grab)
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert region)
      (setq deactivate-mark nil)
      (swap-grab))))

(defun sync-grab-content ()
  (interactive)
  (when (region-and-secondary-do-not-overlap-p)
    (let ((region (buffer-substring (region-beginning) (region-end))))
      (swap-grab)
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert region)
      (setq deactivate-mark nil)
      (swap-grab))))

(defun sync-region-content ()
  (interactive)
  (when (region-and-secondary-do-not-overlap-p)
    (let ((secondary (buffer-substring (secondary-beginning) (secondary-end))))
      (delete-region (region-beginning) (region-end))
      (set-mark (point))
      (insert secondary)
      (setq deactivate-mark nil))))

(provide 'secondary-selection)
